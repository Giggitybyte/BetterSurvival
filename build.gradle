buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.0"
group = "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "modid"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.11.2-13.20.0.2228"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20161220"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

ext.args = [:]

ext.requireArgument = {String property, String displayValue ->
    def value = args[property]
    if (value == null) {
        throw new InvalidUserDataException("$property must be set with \'$property=$displayValue\'")
    }
    return value
}

tasks.addRule("Pattern: <property>=<value>: Passes arguments to the scripts") { String taskName ->
    def match = taskName =~ /(.*?)=(.*?$)/
    if (match) {
        def property = match[0][1]
        def value = match[0][2]
        ext.args[property] = value;
        task(taskName) << {
            println "Passes value \'$value\' to args[\'$property\']"
        }
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter

class CopyJsonTemplate extends DefaultTask {
    @Input
    def template

    @Input
    def arguments

    @Input
    def jsonRename

    @TaskAction
    def build() {
        def args = arguments()
        project.copy {
            from("templates/${template}") {
                expand(args)
                filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('crlf'))
            }
            into 'src/main/resources'
            rename { String filename ->
                def match = filename =~ /(.*)\.json/
                if (match) {
                    def prevFilename = match[0][1]
                    def newFilename = jsonRename.call(prevFilename)
                    return "${newFilename}.json"
                }
                else {
                    return filename
                }
            }
        }
    }
}


task generateBlockModel(type: CopyJsonTemplate) {
    template 'block'
    arguments {
        def blockName = requireArgument('blockName', 'block_name')
        return ['modid':archivesBaseName, 'block_name':blockName]
    }
    jsonRename {
        return args['blockName']
    }
}

task generateItemModel(type: CopyJsonTemplate) {
    template 'item'
    arguments {
        def itemName = requireArgument('itemName', 'item_name')
        return ['modid':archivesBaseName, 'item_name':itemName]
    }
    jsonRename {
        return args['itemName']
    }
}
